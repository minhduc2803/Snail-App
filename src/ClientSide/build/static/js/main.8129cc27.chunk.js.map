{"version":3,"sources":["components/ConversationSearch/index.js","components/ConversationListItem/index.js","components/Toolbar/index.js","components/ToolbarButton/index.js","components/ConversationList/index.js","components/Compose/index.js","components/Message/index.js","components/MessageList/index.js","redux/actions/index.js","components/Messenger/index.js","components/Login/index.js","components/Register/index.js","serviceWorker.js","redux/reducers/index.js","redux/store/index.js","index.js","components/App/index.js"],"names":["ConversationSearch","react_default","a","createElement","className","type","placeholder","ConversationListItem","props","useEffect","shave","chosenIndex","useSelector","state","dispatch","useDispatch","_props$data","data","index","name","photo","text","style","console","log","concat","onClick","react_avatar_es","size","round","Toolbar","title","leftItems","rightItems","ToolbarButton","icon","ConversationList","conversations","listUsers","map","result","Fullname","undefined","chat","length","Content","Toolbar_Toolbar","ToolbarButton_ToolbarButton","key","ConversationSearch_ConversationSearch","conversation","ConversationListItem_ConversationListItem","Compose","ws","websocket","content","user","message","React","useRef","ref","onKeyPress","event","Mode","UserSendID","userID","UserReceiveID","UserID","current","value","send","JSON","stringify","handleSubmit","Message","isMine","startsSequence","endsSequence","showTimestamp","friendlyTimestamp","moment","timestamp","format","join","MessageList","Object","objectSpread","MY_USER_ID","fullname","messages","id","author","SentTime","i","messageCount","tempMessages","previous","next","currentMoment","previousMoment","previousDuration","duration","diff","as","nextMoment","nextDuration","push","Message_Message","renderMessages","Compose_Compose","asyncLogin","username","password","getState","Username","Password","axios","method","url","headers","Content-Type","validateStatus","then","status","alert","token","alreadyLogin","WebSocket","onopen","onmessage","evt","parse","onclose","asyncSetupWebSocket","catch","error","asyncLoadChat","Authorization","Messenger","ConversationList_ConversationList","MessageList_MessageList","Login","usernameInput","passwordInput","onSubmit","preventDefault","required","Register","fullnameInput","asyncRegister","Boolean","window","location","hostname","match","initialState","loginState","rootReducer","arguments","action","store","createStore","applyMiddleware","thunk","createLogger","ReactDOM","render","es","child","Register_Register","Login_Login","Messenger_Messenger","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8129cc27.chunk.js","sourcesContent":["import React from 'react';\nimport './ConversationSearch.css';\n\nexport default function ConversationSearch() {\n    return (\n      <div className=\"conversation-search\">\n        <input\n          type=\"search\"\n          className=\"conversation-search-input\"\n          placeholder=\"Search Messages\"\n        />\n      </div>\n    );\n}","import React, {useEffect} from 'react';\nimport shave from 'shave';\nimport Avatar from 'react-avatar';\nimport { useSelector, useDispatch} from 'react-redux';\n\nimport './ConversationListItem.css';\n\n\nexport default function ConversationListItem(props) {\n  useEffect(() => {\n    shave('.conversation-snippet', 20);\n  })\n    const chosenIndex = useSelector(state => state.chosenIndex);\n    const dispatch = useDispatch();\n    const { index, photo, name, text } = props.data;\n    const style = \"conversation-list-item \"+((index===chosenIndex) ? \"chosen-conversation\":\"\");\n    console.log(style)\n    return (\n      <div className={`${style}`} onClick={() => dispatch({type: \"CHOOSE_CONVERSATION\", chosenIndex: index})}>\n        <Avatar name={`${name}`} size=\"40\" round={true}/>\n        <div className=\"conversation-info\">\n          <h1 className=\"conversation-title\">{ name }</h1>\n          <p className=\"conversation-snippet\">{ text }</p>\n        </div>\n      </div>\n    );\n}","import React from 'react';\nimport './Toolbar.css';\n\nexport default function Toolbar(props) {\n    const { title, leftItems, rightItems } = props;\n    return (\n      <div className=\"toolbar\">\n        <div className=\"left-items\">{ leftItems }</div>\n        <h1 className=\"toolbar-title\">{ title }</h1>\n        <div className=\"right-items\">{ rightItems }</div>\n      </div>\n    );\n}","import React from 'react';\nimport './ToolbarButton.css';\n\nexport default function ToolbarButton(props) {\n    const { icon } = props;\n    return (\n      <i className={`toolbar-button ${icon}`} />\n    );\n}","import React, {useState, useEffect} from 'react';\nimport ConversationSearch from '../ConversationSearch';\nimport ConversationListItem from '../ConversationListItem';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\n\nimport { useSelector} from 'react-redux';\n\nimport './ConversationList.css';\n\nexport default function ConversationList(props) {\n\n  const listUsers = useSelector(state => state.listUsers);\n  \n//   useEffect(() => {\n//     dispatch(asyncLoadUsers());\n//     getConversations()\n//   },[])\n\n  \n    let conversations = listUsers.map((result, index) => {\n      return {\n        index: index,\n        photo: \"#\",\n        name: `${result.Fullname}`,\n        text: result.chat !== undefined && result.chat[result.chat.length-1] !== undefined ? `${result.chat[result.chat.length-1].Content}` : `Say hello to ${result.Fullname}`,\n      };\n    });\n    \n    return (\n      <div className=\"conversation-list\">\n        <Toolbar\n          title=\"Messenger\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        />\n        <ConversationSearch />\n        {\n          conversations.map(conversation =>\n            <ConversationListItem\n              key={conversation.index}\n              data={conversation}\n            />\n          )\n        }\n      </div>\n    );\n}","import React, { useReducer } from 'react';\nimport './Compose.css';\nimport { useSelector } from 'react-redux';\n\n\nexport default function Compose(props) {\n  const ws = useSelector(state => state.websocket);\n  let content = useSelector(state => state.listUsers[state.chosenIndex]);\n  const user = useSelector(state => state.user);\n  const message = React.useRef(null);\n  function handleSubmit(event){\n    console.log(\"yup enter chat\");\n      if (event.key !== 'Enter')\n          return;\n      \n      const chat = {\n          Mode: 1,\n          UserSendID: user.userID,\n          UserReceiveID: content.UserID,\n          Content: message.current.value\n      }\n      message.current.value = \"\";\n      ws.send(JSON.stringify(chat));\n  }\n    return (\n      <div className=\"compose\">\n       \n        <input\n          type=\"text\"\n          ref={message}\n          className=\"compose-input\"\n          placeholder=\"Type a message, @name\"\n          onKeyPress={(event) => { handleSubmit(event) }}\n        />\n       \n        {\n          props.rightItems\n        }\n      </div>\n    );\n}","import React from 'react';\nimport moment from 'moment';\nimport './Message.css';\n\nexport default function Message(props) {\n    const {\n      data,\n      isMine,\n      startsSequence,\n      endsSequence,\n      showTimestamp\n    } = props;\n\n    const friendlyTimestamp = moment(data.timestamp).format('LLLL');\n    return (\n      <div className={[\n        'message',\n        `${isMine ? 'mine' : ''}`,\n        `${startsSequence ? 'start' : ''}`,\n        `${endsSequence ? 'end' : ''}`\n      ].join(' ')}>\n        {\n          showTimestamp &&\n            <div className=\"timestamp\">\n              { friendlyTimestamp }\n            </div>\n        }\n\n        <div className=\"bubble-container\">\n          <div className=\"bubble\" title={friendlyTimestamp}>\n            { data.message }\n          </div>\n        </div>\n      </div>\n    );\n}","import React, {useEffect, useState} from 'react';\nimport Compose from '../Compose';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport Message from '../Message';\nimport moment from 'moment';\nimport { useSelector } from 'react-redux';\n\nimport './MessageList.css';\n\n\n\nexport default function MessageList(props) {\n\n  let content = useSelector(state => state.listUsers[state.chosenIndex]);\n  if(content === undefined)\n    content = {chat: []}\n  if(content.chat === undefined)\n    content = {...content, chat: []}\n  const user = useSelector(state => state.user);\n  const MY_USER_ID = user.fullname;\n  console.log(content)\n    let messages = content.chat.map((message, index) => {\n        return {\n          id: index+1,\n          author: message.UserSendID === user.userID ? user.fullname:content.Fullname,\n          message: message.Content,\n          timestamp: message.SentTime\n        }\n    })\n  console.log(messages)\n\n  const renderMessages = () => {\n    let i = 0;\n    let messageCount = messages.length;\n    let tempMessages = [];\n\n    while (i < messageCount) {\n      let previous = messages[i - 1];\n      let current = messages[i];\n      let next = messages[i + 1];\n      let isMine = current.author === MY_USER_ID;\n      let currentMoment = moment(current.timestamp);\n      let prevBySameAuthor = false;\n      let nextBySameAuthor = false;\n      let startsSequence = true;\n      let endsSequence = true;\n      let showTimestamp = true;\n\n      if (previous) {\n        let previousMoment = moment(previous.timestamp);\n        let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n        prevBySameAuthor = previous.author === current.author;\n        \n        if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n          startsSequence = false;\n        }\n\n        if (previousDuration.as('hours') < 1) {\n          showTimestamp = false;\n        }\n      }\n\n      if (next) {\n        let nextMoment = moment(next.timestamp);\n        let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n        nextBySameAuthor = next.author === current.author;\n\n        if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n          endsSequence = false;\n        }\n      }\n\n      tempMessages.push(\n        <Message\n          key={i}\n          isMine={isMine}\n          startsSequence={startsSequence}\n          endsSequence={endsSequence}\n          showTimestamp={showTimestamp}\n          data={current}\n        />\n      );\n\n      // Proceed to the next message.\n      i += 1;\n    }\n\n    return tempMessages;\n  }\n\n    return(\n      <div className=\"message-list\">\n        <Toolbar\n          title={`${content.Fullname}`}\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        />\n\n        <div className=\"message-list-container\">{renderMessages()}</div>\n\n        <Compose rightItems={[\n          <ToolbarButton key=\"photo\" icon=\"ion-ios-camera\" />,\n          <ToolbarButton key=\"image\" icon=\"ion-ios-image\" />,\n          <ToolbarButton key=\"audio\" icon=\"ion-ios-mic\" />,\n          <ToolbarButton key=\"money\" icon=\"ion-ios-card\" />,\n          <ToolbarButton key=\"games\" icon=\"ion-logo-game-controller-b\" />,\n          <ToolbarButton key=\"emoji\" icon=\"ion-ios-happy\" />\n        ]}/>\n      </div>\n    );\n}","import axios from 'axios'\n\n\nexport function alreadyLogin(user) {\n    return {\n        type: 'ALREADY_LOGIN',\n        user: user\n    }\n}\n\nexport function asyncSetupWebSocket(user){\n    return (dispatch) => {\n        const url = `ws://localhost:9009/chat?token=${user.token}`;\n        var ws = new WebSocket(url);\n        ws.onopen = function(){\n            console.log(\"WebSocket is connected\");\n        }\n\n        ws.onmessage = function(evt){\n            console.log(\"Receive a mess\");\n            console.log(JSON.parse(evt.data));\n            dispatch({type: \"CHAT\", chat: JSON.parse(evt.data)})\n        }\n\n        ws.onclose = function() {\n            console.log(\"webSocket is closed\");\n        }\n        \n        dispatch({type: \"SETUP_WEBSOCKET\",websocket: ws})\n\n    }\n}\n\nexport function asyncLogin(username, password) {\n    return (dispatch, getState) => {\n        dispatch({type: \"START_LOGIN\", username: username})\n        let data = {\n            Username: username,\n            Password: password\n        }\n        data = JSON.stringify(data)\n    \n        return axios({\n            method: 'post',\n            url: 'http://localhost:8055/api/public/login',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            data: data,\n            validateStatus: () => true\n        }).then(result => {\n            if(result.status !== 200)\n                alert(result.data.message)\n            else{\n                \n                let user = {\n                    userID: result.data.data.UserID,\n                    username: getState().user.username,\n                    fullname: result.data.data.Fullname,\n                    token: result.data.data.token\n                }\n                console.log(result.data)\n                dispatch(alreadyLogin(user));\n                dispatch(asyncSetupWebSocket(user));\n            }\n            \n        }).catch(error => {\n            //alert(error.data.message)\n        })\n    }\n}\n\nexport function asyncRegister(username, fullname, password) {\n    return (dispatch) => {\n        let data = {\n            Username: username,\n            Fullname: fullname,\n            Password: password\n        }\n        data = JSON.stringify(data)\n    \n        return axios({\n            method: 'post',\n            url: 'http://localhost:8055/api/public/register',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            data: data,\n            validateStatus: () => true\n        }).then(result => {\n            if(result.status !== 200)\n                alert(result.data.message)\n            else{\n                alert(\"Register successfully\")\n                dispatch({type: \"LOGIN\"});\n\n            }\n            \n        }).catch(error => {\n            //alert(error.data.message)\n        })\n    }\n}\n\nexport function asyncLoadUsers() {\n    return (dispatch, getState) => {\n        \n        return axios({\n            method: 'get',\n            url: 'http://localhost:8055/api/protected/list-user',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${getState().user.token}`,\n            },\n            validateStatus: () => true\n        }).then(result => {\n            if(result.status !== 200) {\n                alert(result.data.message)\n\n                return []\n            }\n            else{\n                \n                dispatch({type: \"LOAD_USERS\", listUsers: result.data.data})\n                return result.data.data;\n            }\n            \n        })\n    }\n}\n\nexport function asyncLoadChat(chosenIndex, content){\n    return (dispatch, getState) => {\n        let data = {\n            UserReceiveID: content.UserID,\n        }\n        data = JSON.stringify(data)\n        console.log(data)\n        return axios({\n            method: 'post',\n            url: 'http://localhost:8055/api/protected/list-chat',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${getState().user.token}`,\n            },\n            data: data,\n            validateStatus: () => true\n        }).then(result => {\n            if(result.status !== 200)\n                alert(result.data.message)\n            else{\n               \n                dispatch({type: \"LOAD_CHAT\", chat: result.data.data, index: chosenIndex})\n                \n            }\n            \n        }).catch(error => {\n            //alert(error.data.message)\n        })\n    }\n}\n\n","import React from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { asyncLoadUsers, asyncLoadChat } from '../../redux/actions';\n\nexport default function Messenger(props) {\n  \n  const dispatch = useDispatch();\n  dispatch(asyncLoadUsers()).then(result => {\n      for( let i=0;i<result.length;i++){\n        dispatch(asyncLoadChat(i, result[i]));\n      }\n  });\n    return (\n      <div className=\"messenger\">\n        {/* <Toolbar\n          title=\"Messenger\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        /> */}\n\n        {/* <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        /> */}\n\n        <div className=\"scrollable sidebar\">\n          <ConversationList />\n        </div>\n\n        <div className=\"scrollable content\">\n          <MessageList />\n        </div>\n      </div>\n    );\n}","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { asyncLogin, alreadyLogin } from '../../redux/actions'\n\nimport './Login.css';\n\nexport default function Login(props) {\n    const usernameInput = React.useRef(null);\n    const passwordInput = React.useRef(null);\n    const dispatch = useDispatch();\n\n    function handleSubmit(event){\n        event.preventDefault();\n        const username = usernameInput.current.value;\n        const password = passwordInput.current.value\n        dispatch(asyncLogin(username,password));\n    }\n\n    return (\n        <div className=\"container\">\n    <section id=\"content\">\n        <form  onSubmit={(event) => { handleSubmit(event) }}>\n            <h1>Snail Project</h1>\n            <div>\n                <input type=\"text\" ref={usernameInput} placeholder=\"Username\" required={true} id=\"username\"/>\n            </div>\n            <div>\n                <input type=\"password\" ref={passwordInput} placeholder=\"Password\" required={true} id=\"password\" />\n            </div>\n            <div>\n                <input type=\"submit\" value=\"Log in\" />\n                \n                <button className=\"example_a\" onClick={() => dispatch({type: \"REGISTER\"})}>Register</button>\n            \n            </div>\n        </form>\n        \n    </section>\n</div>\n    );\n}","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { asyncRegister } from '../../redux/actions';\nimport './Register.css';\n\nexport default function Register(props) {\n    const usernameInput = React.useRef(null);\n    const fullnameInput = React.useRef(null);\n    const passwordInput = React.useRef(null);\n    const dispatch = useDispatch();\n\n    function handleSubmit(event){\n        event.preventDefault();\n        const username = usernameInput.current.value;\n        const fullname = fullnameInput.current.value;\n        const password = passwordInput.current.value\n        dispatch(asyncRegister(username,fullname,password));\n    }\n   \n    return (\n        <div className=\"container\">\n    <section id=\"content\">\n        <form  onSubmit={(event) => { handleSubmit(event) }}>\n        <h1>Snail Project</h1>\n            <div>\n                <input type=\"text\" ref={usernameInput} placeholder=\"Username\" required=\"\" id=\"username\" />\n            </div>\n            <div>\n                <input type=\"text\" ref={fullnameInput} placeholder=\"Fullname\" required=\"\" id=\"fullname\" />\n            </div>\n            <div>\n                <input type=\"password\" ref={passwordInput} placeholder=\"Password\" required=\"\" id=\"password\" />\n            </div>\n            <div>\n                <input type=\"submit\" value=\"Register\" />\n                <button className=\"example_a\" onClick={() => dispatch({type: \"LOGIN\"})}>Login</button>\n            \n            </div>\n        </form>\n        \n    </section>\n</div>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { bindActionCreators } from \"redux\"\n\nconst initialState = {\n    loginState: \"LOGIN\",\n    user: {},\n    listUsers: [],\n    chosenIndex: 0\n}\nconst rootReducer = (state = initialState, action) => {\n    switch(action.type){\n        case \"ALREADY_LOGIN\":\n            return {\n                ...state,\n                loginState: \"ALREADY_LOGIN\",\n                user: action.user\n            }\n        case \"LOGIN\":\n            return {\n                ...state,\n                loginState: \"LOGIN\"\n            }\n\n        case \"REGISTER\":\n            return {\n                ...state,\n                loginState: \"REGISTER\"\n            }\n        \n        case \"START_LOGIN\":\n            return {\n                ...state,\n                user : {\n                    username: action.username\n                }\n            }\n        \n        case \"LOAD_USERS\":\n            return {\n                ...state,\n                listUsers: action.listUsers\n            }\n\n        case \"LOAD_CHAT\":\n            return {\n                ...state,\n                listUsers: state.listUsers.map((content, i) => {\n                    return i === action.index ? {...content, chat: action.chat}\n                                        : content\n                })\n            }\n\n        case \"SETUP_WEBSOCKET\":\n            return {\n                ...state,\n                websocket: action.websocket\n            }\n\n        case \"CHAT\":\n            return {\n                ...state,\n                listUsers: state.listUsers.map((content, i) => {\n                    if (content.UserID === action.chat.UserSendID || content.UserID === action.chat.UserReceiveID){\n                        content.chat.push(action.chat)\n                        return {...content, chat: content.chat}\n                    }else\n                        return content\n                })\n            }\n\n        case \"CHOOSE_CONVERSATION\":\n            return {\n                ...state,\n                chosenIndex: action.chosenIndex\n            }\n            \n        default:\n\n            return state;\n    }\n}\n\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport rootReducer from '../reducers'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk, createLogger()));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n//import { asyncLogin } from './services/login.js';\n\nimport {Provider} from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>, \ndocument.getElementById('root'));\n\n//asyncLogin('xeko','xeko');\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { useSelector } from 'react-redux'\nimport Messenger from '../Messenger';\nimport Login from '../Login'\nimport Register from '../Register'\n\n\nexport default function App() {\n  const loginState = useSelector(state => state.loginState);\n \n  let child = <Register />;\n  if(loginState === \"LOGIN\")\n    child = <Login />;\n  else if(loginState === \"ALREADY_LOGIN\")\n    child = <Messenger />;\n\n    return (\n      <div className=\"App\">\n        {child}\n      </div>\n    );\n}"],"sourceRoot":""}