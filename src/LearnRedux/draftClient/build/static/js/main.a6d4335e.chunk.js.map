{"version":3,"sources":["components/ConversationSearch/index.js","components/ConversationListItem/index.js","components/Toolbar/index.js","components/ToolbarButton/index.js","components/ConversationList/index.js","components/Compose/index.js","components/Message/index.js","components/MessageList/index.js","redux/actions/index.js","components/Messenger/index.js","components/Login/index.js","components/Register/index.js","serviceWorker.js","redux/reducers/index.js","redux/store/index.js","index.js","components/App/index.js"],"names":["ConversationSearch","react_default","a","createElement","className","type","placeholder","ConversationListItem","props","useEffect","shave","_props$data","data","photo","name","text","src","alt","Toolbar","title","leftItems","rightItems","ToolbarButton","icon","concat","ConversationList","conversations","useSelector","state","listUsers","map","result","index","Fullname","Toolbar_Toolbar","ToolbarButton_ToolbarButton","key","ConversationSearch_ConversationSearch","conversation","ConversationListItem_ConversationListItem","Compose","Message","isMine","startsSequence","endsSequence","showTimestamp","friendlyTimestamp","moment","timestamp","format","join","message","MessageList","content","chosenIndex","undefined","chat","Object","objectSpread","user","MY_USER_ID","fullname","console","log","messages","id","author","UserSendID","userID","Content","SentTime","i","messageCount","length","tempMessages","previous","current","next","currentMoment","previousMoment","previousDuration","duration","diff","as","nextMoment","nextDuration","push","Message_Message","renderMessages","Compose_Compose","asyncLoadChat","dispatch","getState","UserReceiveID","UserID","JSON","stringify","axios","method","url","headers","Content-Type","Authorization","token","validateStatus","then","status","alert","catch","error","Messenger","useDispatch","ConversationList_ConversationList","MessageList_MessageList","Login","usernameInput","React","useRef","passwordInput","handleSubmit","event","preventDefault","username","value","password","Username","Password","alreadyLogin","asyncLogin","onSubmit","ref","required","onClick","Register","fullnameInput","asyncRegister","Boolean","window","location","hostname","match","initialState","loginState","rootReducer","arguments","action","store","createStore","applyMiddleware","thunk","createLogger","ReactDOM","render","es","child","Register_Register","Login_Login","Messenger_Messenger","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a6d4335e.chunk.js","sourcesContent":["import React from 'react';\nimport './ConversationSearch.css';\n\nexport default function ConversationSearch() {\n    return (\n      <div className=\"conversation-search\">\n        <input\n          type=\"search\"\n          className=\"conversation-search-input\"\n          placeholder=\"Search Messages\"\n        />\n      </div>\n    );\n}","import React, {useEffect} from 'react';\nimport shave from 'shave';\n\nimport './ConversationListItem.css';\n\nexport default function ConversationListItem(props) {\n  useEffect(() => {\n    shave('.conversation-snippet', 20);\n  })\n\n    const { photo, name, text } = props.data;\n\n    return (\n      <div className=\"conversation-list-item\">\n        <img className=\"conversation-photo\" src={photo} alt=\"conversation\" />\n        <div className=\"conversation-info\">\n          <h1 className=\"conversation-title\">{ name }</h1>\n          <p className=\"conversation-snippet\">{ text }</p>\n        </div>\n      </div>\n    );\n}","import React from 'react';\nimport './Toolbar.css';\n\nexport default function Toolbar(props) {\n    const { title, leftItems, rightItems } = props;\n    return (\n      <div className=\"toolbar\">\n        <div className=\"left-items\">{ leftItems }</div>\n        <h1 className=\"toolbar-title\">{ title }</h1>\n        <div className=\"right-items\">{ rightItems }</div>\n      </div>\n    );\n}","import React from 'react';\nimport './ToolbarButton.css';\n\nexport default function ToolbarButton(props) {\n    const { icon } = props;\n    return (\n      <i className={`toolbar-button ${icon}`} />\n    );\n}","import React, {useState, useEffect} from 'react';\nimport ConversationSearch from '../ConversationSearch';\nimport ConversationListItem from '../ConversationListItem';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './ConversationList.css';\n\nexport default function ConversationList(props) {\n\n  const listUsers = useSelector(state => state.listUsers);\n  \n//   useEffect(() => {\n//     dispatch(asyncLoadUsers());\n//     getConversations()\n//   },[])\n\n  \n    let conversations = listUsers.map((result, index) => {\n      return {\n        index: index,\n        photo: \"#\",\n        name: `${result.Fullname}`,\n        text: 'Hello world! This is a long message that needs to be truncated.'\n      };\n    });\n    \n    return (\n      <div className=\"conversation-list\">\n        <Toolbar\n          title=\"Messenger\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        />\n        <ConversationSearch />\n        {\n          conversations.map(conversation =>\n            <ConversationListItem\n              key={conversation.index}\n              data={conversation}\n            />\n          )\n        }\n      </div>\n    );\n}","import React from 'react';\nimport './Compose.css';\n\nexport default function Compose(props) {\n    return (\n      <div className=\"compose\">\n        <input\n          type=\"text\"\n          className=\"compose-input\"\n          placeholder=\"Type a message, @name\"\n        />\n\n        {\n          props.rightItems\n        }\n      </div>\n    );\n}","import React from 'react';\nimport moment from 'moment';\nimport './Message.css';\n\nexport default function Message(props) {\n    const {\n      data,\n      isMine,\n      startsSequence,\n      endsSequence,\n      showTimestamp\n    } = props;\n\n    const friendlyTimestamp = moment(data.timestamp).format('LLLL');\n    return (\n      <div className={[\n        'message',\n        `${isMine ? 'mine' : ''}`,\n        `${startsSequence ? 'start' : ''}`,\n        `${endsSequence ? 'end' : ''}`\n      ].join(' ')}>\n        {\n          showTimestamp &&\n            <div className=\"timestamp\">\n              { friendlyTimestamp }\n            </div>\n        }\n\n        <div className=\"bubble-container\">\n          <div className=\"bubble\" title={friendlyTimestamp}>\n            { data.message }\n          </div>\n        </div>\n      </div>\n    );\n}","import React, {useEffect, useState} from 'react';\nimport Compose from '../Compose';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport Message from '../Message';\nimport moment from 'moment';\nimport { useSelector } from 'react-redux';\n\nimport './MessageList.css';\n\n\n\nexport default function MessageList(props) {\n\n  let content = useSelector(state => state.listUsers[state.chosenIndex]);\n  if(content === undefined)\n    content = {chat: []}\n  if(content.chat === undefined)\n    content = {...content, chat: []}\n  const user = useSelector(state => state.user);\n  const MY_USER_ID = user.fullname;\n  console.log(content)\n    let messages = content.chat.map((message, index) => {\n        return {\n          id: index+1,\n          author: message.UserSendID === user.userID ? content.Fullname:user.fullname,\n          message: message.Content,\n          timestamp: message.SentTime\n        }\n    })\n  console.log(messages)\n\n  const renderMessages = () => {\n    let i = 0;\n    let messageCount = messages.length;\n    let tempMessages = [];\n\n    while (i < messageCount) {\n      let previous = messages[i - 1];\n      let current = messages[i];\n      let next = messages[i + 1];\n      let isMine = current.author === MY_USER_ID;\n      let currentMoment = moment(current.timestamp);\n      let prevBySameAuthor = false;\n      let nextBySameAuthor = false;\n      let startsSequence = true;\n      let endsSequence = true;\n      let showTimestamp = true;\n\n      if (previous) {\n        let previousMoment = moment(previous.timestamp);\n        let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n        prevBySameAuthor = previous.author === current.author;\n        \n        if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n          startsSequence = false;\n        }\n\n        if (previousDuration.as('hours') < 1) {\n          showTimestamp = false;\n        }\n      }\n\n      if (next) {\n        let nextMoment = moment(next.timestamp);\n        let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n        nextBySameAuthor = next.author === current.author;\n\n        if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n          endsSequence = false;\n        }\n      }\n\n      tempMessages.push(\n        <Message\n          key={i}\n          isMine={isMine}\n          startsSequence={startsSequence}\n          endsSequence={endsSequence}\n          showTimestamp={showTimestamp}\n          data={current}\n        />\n      );\n\n      // Proceed to the next message.\n      i += 1;\n    }\n\n    return tempMessages;\n  }\n\n    return(\n      <div className=\"message-list\">\n        <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        />\n\n        <div className=\"message-list-container\">{renderMessages()}</div>\n\n        <Compose rightItems={[\n          <ToolbarButton key=\"photo\" icon=\"ion-ios-camera\" />,\n          <ToolbarButton key=\"image\" icon=\"ion-ios-image\" />,\n          <ToolbarButton key=\"audio\" icon=\"ion-ios-mic\" />,\n          <ToolbarButton key=\"money\" icon=\"ion-ios-card\" />,\n          <ToolbarButton key=\"games\" icon=\"ion-logo-game-controller-b\" />,\n          <ToolbarButton key=\"emoji\" icon=\"ion-ios-happy\" />\n        ]}/>\n      </div>\n    );\n}","import axios from 'axios'\n\n\nexport function alreadyLogin(user) {\n    return {\n        type: 'ALREADY_LOGIN',\n        user: user\n    }\n}\n\n\nexport function asyncLogin(username, password) {\n    return (dispatch, getState) => {\n        dispatch({type: \"START_LOGIN\", username: username})\n        let data = {\n            Username: username,\n            Password: password\n        }\n        data = JSON.stringify(data)\n    \n        return axios({\n            method: 'post',\n            url: 'http://localhost:8055/api/public/login',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            data: data,\n            validateStatus: () => true\n        }).then(result => {\n            if(result.status !== 200)\n                alert(result.data.message)\n            else{\n                \n                let user = {\n                    userID: result.data.data.UserID,\n                    username: getState().user.username,\n                    fullname: result.data.data.Fullname,\n                    token: result.data.data.token\n                }\n                console.log(result.data)\n                dispatch(alreadyLogin(user));\n\n            }\n            \n        }).catch(error => {\n            //alert(error.data.message)\n        })\n    }\n}\n\nexport function asyncRegister(username, fullname, password) {\n    return (dispatch) => {\n        let data = {\n            Username: username,\n            Fullname: fullname,\n            Password: password\n        }\n        data = JSON.stringify(data)\n    \n        return axios({\n            method: 'post',\n            url: 'http://localhost:8055/api/public/register',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            data: data,\n            validateStatus: () => true\n        }).then(result => {\n            if(result.status !== 200)\n                alert(result.data.message)\n            else{\n                alert(\"Register successfully\")\n                dispatch({type: \"LOGIN\"});\n\n            }\n            \n        }).catch(error => {\n            //alert(error.data.message)\n        })\n    }\n}\n\nexport function asyncLoadUsers() {\n    return (dispatch, getState) => {\n        \n        return axios({\n            method: 'get',\n            url: 'http://localhost:8055/api/protected/list-user',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${getState().user.token}`,\n            },\n            validateStatus: () => true\n        }).then(result => {\n            if(result.status !== 200) {\n                alert(result.data.message)\n\n                return []\n            }\n            else{\n                \n                dispatch({type: \"LOAD_USERS\", listUsers: result.data.data})\n                return result.data.data;\n            }\n            \n        })\n    }\n}\n\nexport function asyncLoadChat(chosenIndex, content){\n    return (dispatch, getState) => {\n        let data = {\n            UserReceiveID: content.UserID,\n        }\n        data = JSON.stringify(data)\n        console.log(data)\n        return axios({\n            method: 'post',\n            url: 'http://localhost:8055/api/protected/list-chat',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${getState().user.token}`,\n            },\n            data: data,\n            validateStatus: () => true\n        }).then(result => {\n            if(result.status !== 200)\n                alert(result.data.message)\n            else{\n               \n                dispatch({type: \"LOAD_CHAT\", chat: result.data.data, index: chosenIndex})\n                \n            }\n            \n        }).catch(error => {\n            //alert(error.data.message)\n        })\n    }\n}\n\n","import React from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { asyncLoadUsers, asyncLoadChat } from '../../redux/actions';\n\nexport default function Messenger(props) {\n  \n  const dispatch = useDispatch();\n  dispatch(asyncLoadUsers()).then(result => {\n      for( let i=0;i<result.length;i++){\n        dispatch(asyncLoadChat(i, result[i]));\n      }\n  });\n    return (\n      <div className=\"messenger\">\n        {/* <Toolbar\n          title=\"Messenger\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        /> */}\n\n        {/* <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        /> */}\n\n        <div className=\"scrollable sidebar\">\n          <ConversationList />\n        </div>\n\n        <div className=\"scrollable content\">\n          <MessageList />\n        </div>\n      </div>\n    );\n}","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { asyncLogin, alreadyLogin } from '../../redux/actions'\n\nimport './Login.css';\n\nexport default function Login(props) {\n    const usernameInput = React.useRef(null);\n    const passwordInput = React.useRef(null);\n    const dispatch = useDispatch();\n\n    function handleSubmit(event){\n        event.preventDefault();\n        const username = usernameInput.current.value;\n        const password = passwordInput.current.value\n        dispatch(asyncLogin(username,password));\n    }\n\n    return (\n        <div className=\"container\">\n    <section id=\"content\">\n        <form  onSubmit={(event) => { handleSubmit(event) }}>\n            <h1>Snail Project</h1>\n            <div>\n                <input type=\"text\" ref={usernameInput} placeholder=\"Username\" required={true} id=\"username\"/>\n            </div>\n            <div>\n                <input type=\"password\" ref={passwordInput} placeholder=\"Password\" required={true} id=\"password\" />\n            </div>\n            <div>\n                <input type=\"submit\" value=\"Log in\" />\n                \n                <button className=\"example_a\" onClick={() => dispatch({type: \"REGISTER\"})}>Register</button>\n            \n            </div>\n        </form>\n        \n    </section>\n</div>\n    );\n}","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { asyncRegister } from '../../redux/actions';\nimport './Register.css';\n\nexport default function Register(props) {\n    const usernameInput = React.useRef(null);\n    const fullnameInput = React.useRef(null);\n    const passwordInput = React.useRef(null);\n    const dispatch = useDispatch();\n\n    function handleSubmit(event){\n        event.preventDefault();\n        const username = usernameInput.current.value;\n        const fullname = fullnameInput.current.value;\n        const password = passwordInput.current.value\n        dispatch(asyncRegister(username,fullname,password));\n    }\n   \n    return (\n        <div className=\"container\">\n    <section id=\"content\">\n        <form  onSubmit={(event) => { handleSubmit(event) }}>\n        <h1>Snail Project</h1>\n            <div>\n                <input type=\"text\" ref={usernameInput} placeholder=\"Username\" required=\"\" id=\"username\" />\n            </div>\n            <div>\n                <input type=\"text\" ref={fullnameInput} placeholder=\"Fullname\" required=\"\" id=\"fullname\" />\n            </div>\n            <div>\n                <input type=\"password\" ref={passwordInput} placeholder=\"Password\" required=\"\" id=\"password\" />\n            </div>\n            <div>\n                <input type=\"submit\" value=\"Register\" />\n                <button className=\"example_a\" onClick={() => dispatch({type: \"LOGIN\"})}>Login</button>\n            \n            </div>\n        </form>\n        \n    </section>\n</div>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { bindActionCreators } from \"redux\"\n\nconst initialState = {\n    loginState: \"LOGIN\",\n    user: {},\n    listUsers: [],\n    chosenIndex: 0\n}\nconst rootReducer = (state = initialState, action) => {\n    switch(action.type){\n        case \"ALREADY_LOGIN\":\n            return {\n                ...state,\n                loginState: \"ALREADY_LOGIN\",\n                user: action.user\n            }\n        case \"LOGIN\":\n            return {\n                ...state,\n                loginState: \"LOGIN\"\n            }\n\n        case \"REGISTER\":\n            return {\n                ...state,\n                loginState: \"REGISTER\"\n            }\n        \n        case \"START_LOGIN\":\n            return {\n                ...state,\n                user : {\n                    username: action.username\n                }\n            }\n        \n        case \"LOAD_USERS\":\n            return {\n                ...state,\n                listUsers: action.listUsers\n            }\n\n        case \"LOAD_CHAT\":\n            return {\n                ...state,\n                listUsers: state.listUsers.map((content, i) => {\n                    return i === action.index ? {...content, chat: action.chat}\n                                        : content\n                })\n            }\n        default:\n            return state;\n    }\n}\n\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport rootReducer from '../reducers'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk, createLogger()));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n//import { asyncLogin } from './services/login.js';\n\nimport {Provider} from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>, \ndocument.getElementById('root'));\n\n//asyncLogin('xeko','xeko');\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { useSelector } from 'react-redux'\nimport Messenger from '../Messenger';\nimport Login from '../Login'\nimport Register from '../Register'\n\n\nexport default function App() {\n  const loginState = useSelector(state => state.loginState);\n \n  let child = <Register />;\n  if(loginState === \"LOGIN\")\n    child = <Login />;\n  else if(loginState === \"ALREADY_LOGIN\")\n    child = <Messenger />;\n\n    return (\n      <div className=\"App\">\n        {child}\n      </div>\n    );\n}"],"sourceRoot":""}