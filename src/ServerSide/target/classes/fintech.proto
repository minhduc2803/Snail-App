syntax = "proto3";

option java_multiple_files = true;
option java_package = "fintech";
option java_outer_classname = "FinTechProto";
package fintech;

enum Code {
  SUCCESS = 0;
  UNAUTHORIZED = 1;
  BAD_REQUEST = 2;
  INCORRECT_PASSWORD = 3;
  NOT_ENOUGH_MONEY = 4;
  INTERNAL_SERVER_ERROR = 5;
}

message Error {
  // code = 0 means success
  Code code = 1;
  string message = 2;
  map<string, string> extra = 3;
}

message BalanceRequest {
  // A request from a user to get current balance of this own user
  // Contain jwt token from header for authentication
}

message BalanceResponse {
  message Data {
    // Information about user's balance
    // Need jwt token authentication to call
    // user_id is taken from jwt token
    int64 balance = 1;
    int64 last_time_update_balance = 2; // the last time when balance changed
  }

  Error error = 1;
  Data data = 2;
}

message HistoryRequest {
  // A request from a user to get current transfer history of this own user
  // Contain jwt token from header for authentication
}

message HistoryResponse {
  message Data {
    // Contain a list of transfer history of a user
    // Need jwt token authentication to call
    // user_id is taken from jwt token
    repeated HistoryItem history_items = 1;
  }

  Error error = 1;
  Data data = 2;
}

message HistoryItem {
  // Information of a user transfer money with it's partner
  // This history has an enum TransferType
  // If TransferType = SEND => user send money to partner
  // If TransferType = RECEIVE => user receive money from partner
  int64 partner_id = 1;
  enum TransferType {
    SEND = 0;
    RECEIVE = 1;
  }
  TransferType transfer_type = 2;

  int64 amount = 3;
  string message = 4; // The message goes with a transaction
  int64 balance = 5; // The balance after transfer
  int64 transfer_time = 6; // The time when the transfer executed
  string username = 7;
  string full_name = 8;
}

message TransferRequest {
  // A transfer request from user
  int64 sender_id = 1;
  int64 receiver_id = 2;
  int64 amount = 3;
  string message = 4;
  string password = 5;
}

message TransferResponse {
  message Data {
    // After transfer succeed, return a history of that transfer
    HistoryItem historyItem = 1;
  }

  Error error = 1;
  Data data = 2;
}

message NotificationRequest {
  // A request from a user to get current transfer notifications of this own user
  // Contain jwt token from header for authentication
}

message NotificationResponse {
  message Data {
    // Contain a list of transfer notifications of a user
    // Need jwt token authentication to call
    // user_id is taken from jwt token
    repeated NotificationItem notification_items = 1;
  }

  Error error = 1;
  Data data = 2;
}

message NotificationItem {
  // A Notification of a user
  // Has a mode variable
  // if mode = 1 => A Notification about A partner sent money to this user
  // if mode = 2 => A partner reminded this user about transfering money
  int64 notification_id = 1; // Every notification has a id
  int32 notification_type = 2;
  int64 partner_id = 3;
  int64 amount = 4;
  string message = 5; // A message goes with a notification
  enum Seen {
    // A notification can be read already or not
    // if UnRead = TRUE => notification is not read yet
    // if UnRead = FALSE => notification is read already
    TRUE = 0;
    FALSE = 1;
  }

  Seen seen = 6; // default: a notification is read already
}

service FintechService {
  rpc getBalance(BalanceRequest) returns(BalanceResponse) {

  }

  rpc getHistory(HistoryRequest) returns(HistoryResponse) {

  }

  rpc transfer(TransferRequest) returns(TransferResponse) {

  }

  rpc getNotification(NotificationRequest) returns(NotificationResponse) {

  }
}
